<!DOCTYPE html>
<html lang="en">
<%- include("./partials/head.ejs") %>

<style>
    p {
        color: #000;
    }
</style>

<body>
<style>
    /* VARIABLES */
    /*****************************************************************************************/

    :root {
        --font-family: 'Comfortaa', cursive;
        /* --color: #EBEBEE; */
        --background-color-inner: #3c3f4b; /* #494d5c;*/
        --background-color-outer:  #000001; /*#252830*/
    }

    /* GLOBAL */
    /*****************************************************************************************/

    html,body{
        height:100%;
    }

    body {

        /* Layout */
        height: 100%;
        margin: 0;

        /*Background*/
        background-color: var(--background-color);
        background: radial-gradient(circle,  var(--background-color-inner) 0%, var(--background-color-outer) 100%);


        /*Font*/
        /* color: var(--color); */
        /* font-family: var(--font-family); */
    }
</style>
<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
<script src='https://s3-us-west-2.amazonaws.com/s.cdpn.io/2666677/OrbitControls.js'></script>
<div class="experiment experiment--11">
    <div class="experiment__viz">
        <p><strong>Experiment 11</strong></p>
        <div id="here"></div>

    </div>
    <div class="experiment__qa">
        <form action='/test12' method='POST'>
            <p>What percent is blue bar of red bar?</p>
            <input type='number' name='input1' class="form-control mb-1" required>
            <input id="userTime" type='hidden' name='time' class="form-control mb-1">
            <br>
            <br>
            <input class="btn btn-primary experiment__btn-next" type='submit'>
        </form>
    </div>
</div>
<script defer>

    function init(){
        const barWidth = 1;
        const barMargin = 1;
        const barHeightMax = 10;
        const colors = ["grey","blue","grey","grey","grey","grey","grey","grey","red","grey"]

        const scene = new THREE.Scene();

        // Create the cammera
        const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, near = 0.1, far = 1000 );

        // Adjust camera position to make the object visable
        camera.position.set(10, 5, 15);

        const renderer = new THREE.WebGLRenderer({antialias: true, alpha: 1});
        renderer.setSize(window.innerWidth / 2, window.innerHeight)
        document.getElementById('here').appendChild(renderer.domElement)

        // Create a color material
        const materials = colors.map(color => new THREE.MeshPhongMaterial( {color: color, shininess: 0}))

        // Add controls to move the camera
        const controls = new THREE.OrbitControls( camera, document.getElementById('here').appendChild(renderer.domElement ));
        controls.noPan = true;

        controls.target.set(0,0,0);
        controls.update();

        // ADD DATA
        //======================================================================================================//

        // Define Data
        const data = [
            {cat1: 1, cat2: 1, value: 1},
            {cat1: 1, cat2: 2, value: 0.4},
            {cat1: 1, cat2: 3, value: 0.1},
            {cat1: 1,  cat2: 4, value: 0.6},
            {cat1: 2, cat2: 1, value: 0.8},
            {cat1: 2, cat2: 2, value: 0.3},
            {cat1: 2, cat2: 3, value: 0.2},
            {cat1: 2,  cat2: 4, value: 0.5},
            {cat1: 3, cat2: 1, value: 0.9},
            {cat1: 3, cat2: 2, value: 0.5},
            {cat1: 3, cat2: 3, value: 0.7},
            {cat1: 3,  cat2: 4, value: 0.4},
            {cat1: 4, cat2: 1, value: 0.6},
            {cat1: 4, cat2: 2, value: 1},
            {cat1: 4, cat2: 3, value: 0.4},
            {cat1: 4,  cat2: 4, value: 0.3}
        ]

        // Create Bar
        function createBar(i, cat1, cat2, value, marteial) {
            // Create a 3d bar
            let geometry = new THREE.BoxGeometry(1,1,1);

            // Create torus by combining its geometry with material and add it to the scene
            let bar = new THREE.Mesh( geometry, marteial );
            bar.castShadow = true; //default is false
            scene.add( bar );

            bar = scaleBar(bar, value)
            bar = positionBar(bar, i, cat1, cat2, value)

            return bar
        }

        function scaleBar(bar, value){
            // Scale the bar accorting to the data and global settings
            bar.scale.y = value * barHeightMax;
            bar.scale.x = barWidth;

            return bar;
        }

        function positionBar(bar, i, cat1, cat2, value){
            // Position the bar on x axes by shifting it depending on the index in the data and the defined bar dimensions
            bar.position.x = ((cat2-1) * (barWidth + barMargin)) - (data.length/8 * (barWidth + barMargin)) + (barWidth + barMargin)/2;
            bar.position.y += (value * barHeightMax/2) - barHeightMax/2;
            bar.position.z -= ((cat1-1) * (barWidth + barMargin)) - (data.length/8 * (barWidth + barMargin)) + (barWidth + barMargin)/2

            return bar;
        }

        bars = []
        data.forEach((d, i) => {
            bar = {
                geometry: createBar(i, d.cat1, d.cat2, d.value, materials[(d.value*10)-1]),
                d: d,
                i: i
            }
            bars.push(bar);
            scene.add(bar.geometry);
        })

        // ADD LIGHT
        //======================================================================================================//

        // Create light and add it to the scene
        const light = new THREE.DirectionalLight("grey", 1);
        light.position.set(-1, 0, 1)
        scene.add( light );

        const lightAmbient = new THREE.AmbientLight("white")
        scene.add( lightAmbient );

        // ANIMATE
        //======================================================================================================//

        const animate = () => {

            // Render the scene according to the camera settings
            renderer.render(scene, camera)

            // Set up endless repetition/ loop
            requestAnimationFrame(animate)
        }


        // Render the scene according to the camera settings
        renderer.render(scene, camera)

        // Call function to animate in a loop (after 2 seconds)
        setTimeout(function(){ animate(); }, 1000);


        // REACT TO RESIZE
        //======================================================================================================//

        const onResize = () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize( 500, window.innerHeight );
        }

        // React to resizing of the browser
        window.addEventListener( 'resize', onResize, false);


    }

    window.addEventListener("load", init)

</script>
</body>
</html>
