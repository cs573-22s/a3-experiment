<script src="https://d3js.org/d3.v7.min.js"></script>
<svg class="svg1" width="450px" height="450px"></svg>
<!--<button onclick="orderBarGraph()">Order</button>-->
<script defer>
  (() => {
    //let dataset =  [73, 18, 56, 38, 4]
    let dataset = dataset1;
    let colors = ["grey", "grey", "grey", "grey", "grey"]; // color scheme for bars

    const width = 500;
    const height = 500;

    var svg1 = d3
      .select("svg")
      .attr("viewBox", [0, 0, width, height])
      .property("value", []);

    const linscale = d3
      .scaleLinear()
      .domain([0, 100]) // unit: km
      .range([0, width]); // unit: px

    const yAxisScale = d3
      .scaleLinear()
      .domain([100, 0]) // unit: km
      .range([0, width]); // unit: px

    function setColors(index1, index2) {
      colors[index1] = "blue";
      colors[index2] = "red";
    }
    setColors(bar1, bar2);
    // const colorScale = d3.scaleLinear()
    //     .domain([0, 100])
    //     .range(['blue', 'red']);

    const axis = d3.axisLeft().scale(yAxisScale).ticks(20);

    // Add Rectangles

    var rect = svg1
      .append("g")
      .selectAll("rect")
      .data(dataset)
      .enter()
      .append("rect")
      .attr("width", 50)
      .attr("height", (data) => linscale(data))
      .attr("stroke", "black")
      // .attr('fill', data => colorScale(data))
      .attr("fill", (d, i) => colors[i])
      .attr("x", function (d, i) {
        return i * 75 + 50;
      })
      .attr("y", (data) => 500 - linscale(data))
      .attr("transform", "translate(75,0)");
    /*.on("mouseover",(e, d) => {    // event listener to show tooltip on hover
            d3.select("#bubble-tip-"+d)
                .style("display","block");
        })
        .on("mouseout", (e, d) => {    // event listener to hide tooltip after hover
            if(!d.toolTipVisible){
                d3.select("#bubble-tip-"+d)
                    .style("display","none");
            }
        })
        .on("click", (e, d) => {    // event listener to make tooltip remain visible on click
            if(!d.toolTipVisible){
                d3.select("#bubble-tip-"+d)
                    .style("display", "block");
                d.toolTipVisible = true;
            }
            else{
                d3.select("#bubble-tip-"+d)
                    .style("display", "none");
                d.toolTipVisible = false;
            }
        })*/

    /*svg1.selectAll(".bubble-tip")
        .data(dataset)
        .join("g")
        .attr("class", "bubble-tip")
        .attr("id", (d)=> "bubble-tip-"+d)
        .attr("transform", "translate(400 , 50)")
        .style("display", "none")
        .append("rect")
        .attr("x",-5)
        .attr("y",-20)
        .attr("rx",5)
        .attr("fill","gray")
        .attr("fill-opacity", 0.9)
        .attr("width",100)
        .attr("height",50)


    svg1.selectAll(".bubble-tip")
        .append("text")
        .text(d => d)
        .style("font-family", "sans-serif")
        .style("font-size", 14)
        .attr("stroke", "none")*/

    d3.select(".svg1")
      .append("g")
      .attr("transform", "translate(50, 0)")
      .call(axis);

    /*let ordered = false;
    function orderBarGraph() {
        let ogDataset = dataset.slice(0);

        rect.remove()
        if (!ordered) {
            ogDataset.sort((a, b) => a - b)
            ogDataset.reverse()
        }
        rect = svg1
            .append('g')
            .selectAll('rect')
            .data(ogDataset)
            .enter().append('rect')
            .attr('width',50)
            .attr('height', data => linscale(data))
            .attr('stroke', 'black')
            .attr('fill', data => colorScale(data))
            .attr('x', function (d, i) { return (i * 75) + 50; })
            .attr('y', data => 500 - linscale(data))
            .attr('transform', 'translate(75,0)')
            .on("mouseover",(e, d) => {    // event listener to show tooltip on hover
                d3.select("#bubble-tip-"+d)
                    .style("display","block");
            })
            .on("mouseout", (e, d) => {    // event listener to hide tooltip after hover
                if(!d.toolTipVisible){
                    d3.select("#bubble-tip-"+d)
                        .style("display","none");
                }
            })
            .on("click", (e, d) => {    // event listener to make tooltip remain visible on click
                if(!d.toolTipVisible){
                    d3.select("#bubble-tip-"+d)
                        .style("display", "block");
                    d.toolTipVisible = true;
                }
                else{
                    d3.select("#bubble-tip-"+d)
                        .style("display", "none");
                    d.toolTipVisible = false;
                }
            })
        ordered = !ordered;
    }*/
  })();
</script>
