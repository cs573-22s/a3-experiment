<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.9.1/gsap.min.js" integrity="sha512-H6cPm97FAsgIKmlBA4s774vqoN24V5gSQL4yBTDOY2su2DeXZVhQPxFK4P6GPdnZqM9fg1G3cMv5wD7e6cFLZQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/lodash.js/2.4.1/lodash.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/three@0.101.1/examples/js/controls/OrbitControls.js"></script>
<script src="https://cdn.skypack.dev/pin/three@v0.137.5-HJEdoVYPhjkiJWkt6XIa/mode=imports/optimized/three.js"></script>

<div id="webGL-container3"></div>
<script defer>
    // three.js trial
    ///////////////////////
    // Initial Variables //
    ///////////////////////
    //let dataset =  dataset3d
    // let dataset = dataset1;

    //let colors = ['grey', 'grey', 'grey', 'grey', 'grey'] // color scheme for bars

    function setColors(index1x, index1y, index2x, index2y) {
        colors[index1y][index1x] = 'blue';
        colors[index2y][index2x] = 'red';
    }
    // setColors(bar1, bar2);

    // Values
    var tick = 0;
    var size = 0.25;

    var red = 0xff0000;
    var blue = 0x1176c5;
    var white = 0xf9f9f9;

    // Arrays
    var bar = new Array();

    var camera;
    // var scene;

    ///////////////////////
    // Initial Setup     //
    ///////////////////////

    init3D();

    function init3D() {
        init3DScene();
        initListeners();

    }

    function initListeners() {
        window.onWindowResize()
    }

    function init3DScene() {

        // Setup Scene / Camera
        scene = new THREE.Scene();
        camera = new THREE.PerspectiveCamera(35, window.innerWidth / window.innerHeight, 0.1, 2000);

        camera.position.set(100, 100, 300);
        camera.lookAt(new THREE.Vector3(20, 40, 0));

        // Setup Renderer
        renderer = new THREE.WebGLRenderer({
            antialias: true
        });

        renderer.shadowMap.enabled = true;
        renderer.shadowMap.type = THREE.PCFSoftShadowMap;

        renderer.setSize(window.innerWidth/2, window.innerHeight);
        renderer.render(scene, camera);



        document.getElementById('webGL-container3').append(renderer.domElement)
        //$("#webGL-container").append(renderer.domElement);
        controls = new THREE.OrbitControls (camera, renderer.domElement);
        controls.noPan = true;

        // var gridXZ = new THREE.GridHelper(100, 10);
        // gridXZ.setColors( new THREE.Color(0xff0000), new THREE.Color(0xffffff) );
        // scene.add(gridXZ);

        let gXY = new THREE.PlaneGeometry(3, 10, 1, 10);
        ToQuads(gXY);
        let mXY = new THREE.LineBasicMaterial({color: "black"});
        let grXY = new THREE.LineSegments(gXY, mXY);
        grXY.scale.set(10, 8, 1);
        grXY.position.set(6, 40, -22.5);
        scene.add(grXY);

        let gYZ = new THREE.PlaneGeometry(10, 3, 10, 1);
        ToQuads(gYZ);
        let mYZ = new THREE.LineBasicMaterial({color: "black"});
        let grYZ = new THREE.LineSegments(gYZ, mYZ);
        grYZ.scale.set(8, 10, 1);
        grYZ.rotation.x = Math.PI * -0.5;
        grYZ.rotation.y = Math.PI / 2;
        grYZ.position.set(21, 40, -7.5);
        scene.add(grYZ);

        init3DElements()

    }

    function ToQuads(g) {
        let p = g.parameters;
        let segmentsX = (g.type == "TorusBufferGeometry" ? p.tubularSegments : p.radialSegments) || p.widthSegments || p.thetaSegments || (p.points.length - 1) || 1;
        let segmentsY = (g.type == "TorusBufferGeometry" ? p.radialSegments : p.tubularSegments) || p.heightSegments || p.phiSegments || p.segments || 1;
        let indices = [];
        for (let i = 0; i < segmentsY + 1; i++) {
            let index11 = 0;
            let index12 = 0;
            for (let j = 0; j < segmentsX; j++) {
                index11 = (segmentsX + 1) * i + j;
                index12 = index11 + 1;
                let index21 = index11;
                let index22 = index11 + (segmentsX + 1);
                indices.push(index11, index12);
                if (index22 < ((segmentsX + 1) * (segmentsY + 1) - 1)) {
                    indices.push(index21, index22);
                }
            }
            if ((index12 + segmentsX + 1) <= ((segmentsX + 1) * (segmentsY + 1) - 1)) {
                indices.push(index12, index12 + segmentsX + 1);
            }
        }
        g.setIndex(indices);
    }


    function init3DElements() {

        createFloor();


        createBar(-20, dataset3d[4]);
        createBar(-15, dataset3d[3]);
        createBar(-10, dataset3d[2]);
        createBar(-5, dataset3d[1]);
        createBar(0, dataset3d[0]);




        createLight();
    }

    ///////////////////////
    // Interactions      //
    ///////////////////////

    function onWindowResize() {

        windowHalfX = window.innerWidth / 2;
        windowHalfY = window.innerHeight / 2;

        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
    }

    ///////////////////////
    // Create Elements   //
    ///////////////////////

    function createLight() {

        var ambient = new THREE.AmbientLight(0x999999);
        var spot = new THREE.SpotLight({
            color: 0xffffff,
            intensity: 0.1
        });

        spot.position.set(-50, 100, 100);
        spot.castShadow = true;
        //spot.shadowDarkness = 0.2;

        scene.add(ambient, spot);
    }

    function createBar(z, dataArray) {

        for (var i = 0; i < dataArray.length; i += 1) {

            var geometry = new THREE.BoxGeometry(2, 2, 2);
            geometry.applyMatrix(new THREE.Matrix4().makeTranslation(0, 1, z));

            var material = new THREE.MeshPhongMaterial({
                // color: colors[i]
                color: 'grey'
            });

            id = new THREE.Mesh(geometry, material);

            id.position.x = i * 5;
            id.name = "bar2-" + i + z;
            id.castShadow = true;
            id.receiveShadow = true;

            scene.add(id);
            bar.push(id);

            selectedBar = bar[Math.floor(bar.length / 2)];
        }

        for (var i = 0; i < bar.length; i++) {

            var tween = new TweenMax.to(bar[i].scale, 1, {

                ease: Elastic.easeOut.config(1, 1),

                y: dataArray[i], // might need to change scaling depending on data sent
                delay: i * 0.25

            });
        }


    }

    function createFloor() {

        var geometry = new THREE.BoxGeometry(2000, 2000, 2000);
        var material = new THREE.MeshPhongMaterial({
            color: 0xcccccc,
            shininess: 20
        });
        material.side = THREE.BackSide

        floor = new THREE.Mesh(geometry, material);

        floor.position.set(0, 1000, 0);
        floor.rotation.x = THREE.Math.degToRad(-90);

        floor.receiveShadow = true;

        scene.add(floor);
    }

    ///////////////////////
    // Render            //
    ///////////////////////

    function render() {

        tick++;

        requestAnimationFrame(render);
        renderer.render(scene, camera);
    };

    function animate() {
        controls.update();
        requestAnimationFrame( animate );
        renderer.render( scene, camera );
    }


    setInterval(function(){

        scene.rotation.y += 0.0003;
    }, 5);

    render();
    animate();
</script>
